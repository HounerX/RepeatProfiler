#!/bin/bash

#we will miss you pileup :( 
rm -f *.out *.bam *fofn* Errors_README.txt


currentDate=`date`
currentDate=`tr ' ' '_' <<<"$currentDate"`
rm -f Errors_README.txt
#echo $currentDate


commands=$@ 

#echo "$(brew --cellar repeat)/$(brew list --versions repeat | tr ' ' '\n' | tail -1)/lib this lists all version paths 

#brew link --overwrite >/dev/null 2>&1  #brew stuff


#mydir=`echo "$(brew --cellar repeatprof)/0.9/libexec"` #brew stuff

#R_packages=`echo "$(brew --cellar repeatprof)/0.9/R_packages"` #brew stuff


mydir=`pwd`

num_commands=`echo $commands | wc -w `

if ((num_commands == 0 ))
 then
echo "RepeatProfiler v 0.9 -prerelease- x New x Beginning x "
echo "please use -h flag to view help menu for how to use this tool"


echo "____ ____ ___  ____ ____ ___    ___  ____ ____ ____ _ _    ____ ____" 
echo "|__/ |___ |__] |___ |__|  |     |__] |__/ |  | |___ | |    |___ |__/ "
echo "|  \ |___ |    |___ |  |  |     |    |  \ |__| |    | |___ |___ |  \ "
                                                                     

exit 1

fi






if  [[ $1 == "profile" ]] ||  [[ $1  ==  "clean" ]] || [[ $1 ==  "-h" ]] || [[ $1 == "pre-corr" ]]; then

echo "" > /dev/null


else

echo "wrong command structure please use -h to view a sample command or refer to the manual"
exit 1


fi








if [ "$1" == "profile" ]; then

if  [[ $2 == "-u" ]] ||  [[ $2  ==  "-p" ]]; then

echo "" > /dev/null


else

echo "second parameter should be -u or -p"
exit 1


fi 

if (( num_commands < 4 ))
 then

echo "Not all madantory flags were used. please review a sample usage using  the  -h flag to view help menu"

exit 1

fi

commands=$@
array=(${commands})
index=0

for t in "${array[@]}"
do

if [[ $t  ==  "-o" ]]; then
	((index ++))

	the_path=${array[index]}

	    if [[ -d $the_path ]]; then
		
		 echo "the output will be at  $the_path  as you specified"
		
		else
		   echo "the output directory specified is not correct. Please make sure it has no blanks and it is valid or dont specify and it will output the folder in current directory"
		
		   exit 0
		fi
		
		
		
		
		
		
    fi
		((index ++))

done


array=(${commands})
index=0

for p in "${array[@]}"
do
if [[ $p  ==  "-usrprov" ]]; then
	((index ++))
	
	user_prov=${array[index]}
	    if [[ -f $user_prov ]]; then
		
		currentdir=`pwd`
	
		 cp $user_prov  $currentdir
		
		else
		   echo "the path of user_provided.txt file isnt correct"
		
		   exit 0
		fi
		
		
		
		
		
		
    fi
	((index ++))
done




The_folder="$currentDate-RepeatProfiler"
mkdir $The_folder


BASE="refbase_"
commands=$@ 


#it works 	





if [[ -d $3 ]]; then
	rm -f -r Refrences_used
	mkdir Refrences_used
	echo "The refrences inputed:"
	path_refs=`cat $3/*.fa > all_refs.fa`
	bash $mydir/Fasta_splitter.sh all_refs.fa

	refs=Refrences_used

elif [[ -f $3 ]]; then
	rm -f -r Refrences_used
	mkdir Refrences_used


echo "The refrences inputed:"

bash $mydir/Fasta_splitter.sh $3

refs=Refrences_used


else
    echo "The path to folder of Refrences files  or The path to your Refrecnes file is not valid"
    exit 1
fi
rm -f -r Errors.log  2> /dev/null
rm *bam *bt2  2> /dev/null
rm -f -r all_depth_cvs  2> /dev/null
mkdir all_depth_cvs




rm -f *out  2> /dev/null
ls $refs/*.fa > fofnrefs.txt 
echo "Reference	Sample_index	Read1	Read2	Total_reads	percent_mapped" > The_summary.txt

while read line
do

ref_char_count=`tail -n +2 $line | tr -cd 'ATGCatgc'  | wc -c`
name_ref=$(awk -F "/" '{print $NF}' <<< $line) 


if [[ $ref_char_count == 0 ]]; then
echo ""
echo "your $name_ref is an empty sequence or not in the correct format. It wont be analyzed or indexed. Please revise it " | tee -a Errors_README.log
echo ""


else

echo "$(tail -n +2 $line)" > ref_temp.txt

The_ref_size=`wc -c < ref_temp.txt`

bash $mydir/Readmegen.sh

    bowtie2-build $line $BASE > /dev/null 2> /dev/null
    echo "The name of the reference  sequence whose index was built and currently under analysis :"
    echo "$line" 
    echo ""
	


#bash index_refs.sh
name_ref=$(awk -F "/" '{print $NF}' <<< $line) 

Ref_name=$name_ref
ReadPair=1

stringe="$Ref_name"
stringee="_output"
the_output="$stringe$stringee"
rm -f -r $the_output
mkdir $the_output

echo "$the_output" >>fofn_Theoutputs.txt







numPairpile=1


p=8

commands=$@
array=(${commands})
index=0

for th in "${array[@]}"
do

if [[ $th  ==  "-t" ]]; then
	((index ++))

	p=${array[index]}
		
		
	    re='^[0-9]+$'
	if ! [[ $p =~ $re ]] ; then
	p=8	
	fi

		
		
		
		
		
fi
		((index ++))

done
echo "Threads used: $p"


# if [[ $@  ==  *"-t"* ]]; then

# commands=$@
# p=`echo "$commands" | awk '{for (I=1;I<=NF;I++) if ($I == "-t") {print $(I+1)};}' `	
# re='^[0-9]+$'
# if ! [[ $p =~ $re ]] ; then
   # p=8	
# fi


# echo "Threads used: $p"
# fi

a="--very-sensitive-local"
commands=$@
array=(${commands})

for i in "${array[@]}"
do

if [[ $i  ==  "--very-fast" ]] || [[ $i  ==  "--local" ]] || [[ $i  ==  "--fast" ]] || [[ $i  ==  "--sensitive" ]] || [[ $i  == "--very-sensitive" ]] || [[ $i  ==  "--very-fast-local" ]] || [[ $i  ==  "--fast-local" ]] || [[ $i  ==  "--sensitive-local" ]] || [[ $i  ==  "--very-sensitive-local" ]]; then
		a=$i
    fi
done



if [[ $@  ==  *"-D"* ]]; then
commands=$@
a=`echo "$commands" | awk '{for (I=1;I<=NF;I++) if ($I == "-D") {print $I " " $(I+1) " " $(I+2) " " $(I+3)" " $(I+4) " " $(I+5) " " $(I+6) " " $(I+7) " " $(I+8) " " $(I+9) };}' `	


fi

echo "Bowtie2 alignment settings: $a"


bash $mydir/map_mpileup.sh $line $4 $2 $p $a 
retval=$?

if [ $retval -ne 0 ]; then
    
exit 1

fi

echo "name_poly" > multi_poly_names.txt
rm -f -r multi_poly
mkdir multi_poly
rm -f temp_cvs
mkdir temp_cvs
while read pairpile
do

F=`printf "%03d\n" $numPairpile`

pile_counted_name="${Ref_name}_${F}"

echo $pile_counted_name >> multi_poly_names.txt

python $mydir/pileup_basecount_sink.py $pairpile $pile_counted_name $The_ref_size


cp "$pile_counted_name.csv" all_depth_cvs
mv "$pile_counted_name.csv" temp_cvs

output=$Ref_name

stringpile2="$F"
stringpile3="_"
output="$output$stringpile3$stringpile2"
	
echo "$output" >> fofn_folders.txt
Rscript $mydir/polymorphism_2.0.R $output $R_packages



rm -f -r $output	
	
mkdir $output
mv  *.png  pileup_counted.txt  $output  
#mv $output $the_output  # we are not moving now  we move in next pile up loop 
	
((numPairpile ++))

done < fofn_pileup.txt


while read folder_names
do


echo $folder_names

Rscript $mydir/RP_4.0.R $folder_names $R_packages

mv $folder_names $the_output
done < fofn_folders.txt


Rscript $mydir/All_RP_graphs_reference.R $R_packages


Rscript $mydir/multi_Poly_maker.R $R_packages 

mv *combined* $the_output
rm -f phylip.phy
Rscript $mydir/fraction_bases.R  > Closely_related_reads_analysis.txt

mv phylip.phy $the_output

mv *variation_analysis* $the_output
mv Closely_related_reads_analysis.txt $the_output



	



if [[ $@  ==  *"-corr"* ]]; then

if [[ !(-f user_provided.txt) ]]; then

echo "user_provided.txt wasnt provided, so the graph of correlation between reads for a refrence  wont be produced. Only the matrix." >> Errors_README.log

fi

Rscript $mydir/Corr_test.R $the_output $R_packages 2> R_correlation_errors.txt


if [ -s R_correlation_errors.txt ]
then
        rm -f R_correlation_errors.txt
else
mv R_correlation_errors.txt $the_output

fi













#mv multi_poly $the_output    uncomment when testing 
#mv multi_poly_names.txt $the_output
	
	
	
commands=$@
array=(${commands})
index=0

for k in "${array[@]}"
do

if [[ $k  ==  "-k" ]]; then

      		
		mv *.bam *.out $the_output

		
		
		
fi
		((index ++))

done	
	



fi # end of pile up 
mv $the_output $The_folder
rm -f folder_names.txt

rm *bt2
rm -f -r temp_cvs
rm -f fofn_folders.txt

fi #this an fi for error handling dont mess with it. this is the end of the refrence
done < fofnrefs.txt

	


#rm -f *csv
Rscript $mydir/The_depth_analyser.R 2> /dev/null
Number=`wc -l < fofn_bam.txt`

#rm -f all_Refrences_color_scaled_combined_graph.pdf

rm -f -r refrences_wide_color_scaled_graphs
mkdir refrences_wide_color_scaled_graphs

echo "Thenumber: $Number"

Rscript $mydir/All_RP_graphs.R $Number $R_packages
mv  refrences_wide_color_scaled_graphs $The_folder 
#mv *pdf all_graphs_scaled


# if [ -f all_Refrences_color_scaled_combined_graph.pdf ]; then

# mv all_Refrencets_color_scaled_combined_graph.pdf $The_folder
# else
#echo "There was only 1 refrence inputed, so no combined refrences_scale_wide_graph.pdf for this run"
# fi


mv  *ReadMe*  $The_folder

rm -f The_summary.txt ref_temp.txt bowtie.log  *db.2*

mv Refrences_used $The_folder
mv all_depth_cvs $The_folder
mv The_summary_final.csv Errors_README.log $The_folder 2> /dev/null
rm -f  *Rplots*	

rm -f  *fofn* *.out *.bam all_refs.fa

rm -f -r multi_poly multi_poly_names.txt #Index_conv.txt #comment when testing

#design of the cow was borrowed from the famous cowsay command

echo "________________________________"                      
echo "< WOW what a great pipeline !!!! >"
echo "--------------------------------"
echo "       \   ^__^"       
echo "        \  (oo)\_______         "
echo "           (__)\       )\/\  "
echo "               ||----w |    "
echo "               ||     ||    "
if [[ -d $the_path ]]; then
mv $The_folder $the_path
fi



fi 


if [ "$1" == "pre-corr" ]; then

reads=$3

if  [[ $2 == "-u" ]] ||  [[ $2  ==  "-p" ]] ||  [[ $2  ==  "-v" ]]; then
echo "" > /dev/null
	

else
echo "wrong usage of pre-corr. please refer to github page on how to use it or type repeatprof -h  to review the structure"

exit 1
fi
if [ $2 = "-p" ]; then

ls ${reads}/*_R1.fastq ${reads}/*_R1.gz ${reads}/*_R1.fq  ${reads}/*_R1.fastq.gz ${reads}/*_R1.fq.gz  ${reads}/*_1.fq ${reads}/*_1.fq.gz ${reads}/*_1.gz ${reads}/*_1.fastq ${reads}/*_1.fastq.gz > fofn1.txt 2>/dev/null

ls ${reads}/*_R2.fastq ${reads}/*_R2.gz ${reads}/*_R2.fastq.gz ${reads}/*_R2.fq ${reads}/*_R2.fq.gz  ${reads}/*_2.fq.gz  ${reads}/*_2.fq ${reads}/*_2.gz ${reads}/*_2.fastq ${reads}/*_2.fastq.gz 	 > fofn2.txt 2>/dev/null


reads1_check=`cat fofn1.txt | wc -l`
reads2_check=`cat fofn2.txt | wc -l `

fi
if [ $2 = "-u" ]; then

ls ${reads}/*.fastq ${reads}/*.gz ${reads}/*.fq ${reads}/*.fq.gz    > fofn1.txt 2>/dev/null

ls ${reads}/*.fastq ${reads}/*.gz ${reads}/*.fq  ${reads}/*.fq.gz  > fofn2.txt 2>/dev/null



reads1_check=`cat fofn1.txt | wc -l`
reads2_check=`cat fofn2.txt | wc -l `

fi






if [[ $reads1_check == 0 && $reads2_check == 0 ]];then
echo ""

echo "The path of a file of  paired  read  provided doesnt contain any paired read that has correct format."| tee -a Errors_README.log
echo "Make sure your read pairs  are in .fastq or .gz or .fq AND revise the path inputed"| tee -a Errors_README.log
echo "Analysis wont be able to continue due to the failure of finding reads"
exit 1


fi

if [ "$reads1_check" != "$reads2_check" ]; then

echo "There is a pair of read missing. Please check the folder where you have your paired reads "| tee -a Errors_README.log
exit 1
fi

Rscript $mydir/user_supplied_maker.R $2





fi

if [ "$1" == "clean" ]; then
rm -f -r *bam *fofn* *.out* *multi_poly_names* *_output* *_conv* *summary* *bt2* *ref_temp* *bowtie.log* *ReadMe* *_cvs* *_temp* *db.2* *Rplots* all_refs.fa Refrences_used
echo "remians of a broken run were cleaned successfuly "
fi
if [ "$1" == "-h" ]; then
echo ""

echo "a sample command for profiling will be:"
echo "repeatprof profile <-p for paired reads or  -u for unpaired> <the refrence sequence path > <path of the folder containing reads> [opitonal flags]"
echo ""
echo "optional flags:"
echo "-o <folder_path>	use to specifiy an directory where the final output file  be directed to. Default: current directory"
echo "			This will direct the final output folder  to this specifiy folder"
echo "-corr		        type this flag to make the correlation analysis. user_provided.txt is needed for the correlation graph. Please refer to the github page for more info about this or look below"
echo "--very-fast | --local | --fast " 
echo "--very-fast-local | --fast-local  type one of these 9 alignment settings for bowtie2. Default is  --very-sensitive"
echo "-sensitive | --very-sensitive "
echo "--very-sensitive-local | --sensitive-local  "
echo "-k	use this flag if you want to keep the sorted bam files of the alignments in the final output folder"



echo ""



echo "Supported read formats:"
echo "Paired reads: _R1.fastq _R1.fastq.gz _R1.fq  _R1.fq.gz  _1.fastq _1.fastq.gz _1.fq  _1.fq.gz  "
echo "              _R2.fastq _R2.fastq.gz _R2.fq  _R2.fq.gz  _2.fastq _2.fastq.gz _2.fq  _2.fq.gz  "
echo "Unpaired reads:  .fastq .fastq.gz .fq  .fq.gz  .fastq .fastq.gz .fq"
echo "Supported refrence  formats:"
echo "refrences need to be in fasta format. They can be multi-sequence or single sequence fasta file."









echo "--------------------------------other usages: "

echo "repeatprof pre-corr <-u for unpaired reads  or -p paired reads  > <path of the folder containing reads> use this command to help prepare user_provided.txt for correlation graph produced by -corr flag in profile "
echo "repeatprof pre-corr -v  use this command to review your edited user_provided.txt with your desired groups. This ensures that it is still in the correct file format."
echo "repeatprof clean		use this command to cleanup a broken/terminated run"

echo ""




echo "check our github page https://github.com/johnssproul/RepeatProfiler for more  detailed info  on how to run the tool/sample inputs/ output explanation/tutorial "


fi
